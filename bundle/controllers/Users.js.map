{"version":3,"sources":["../../server/controllers/Users.js"],"names":["signup","req","res","body","user","jwt","sign","id","email","process","env","SECRET","expiresIn","token","status","json","data","firstName","lastName","error","message","login"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AACA;AAEO,IAAMA,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEC,oBAAQD,GAAG,CAACE,IAAZ,CAFD;;AAAA;AAEZC,YAAAA,IAFY;AAAA;AAAA,mBAIEC,yBAAIC,IAAJ,CAAS;AAAEC,cAAAA,EAAE,EAAEH,IAAI,CAACG,EAAX;AAAeC,cAAAA,KAAK,EAAEJ,IAAI,CAACI;AAA3B,aAAT,EAClBC,OAAO,CAACC,GAAR,CAAYC,MADM,EAElB;AAAEC,cAAAA,SAAS,EAAE;AAAb,aAFkB,CAJF;;AAAA;AAIZC,YAAAA,KAJY;AAQlB;AAEAX,YAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,cAAAA,MAAM,EAAE,GADW;AAEnBE,cAAAA,IAAI,EAAE;AACJH,gBAAAA,KAAK,EAALA,KADI;AAEJN,gBAAAA,EAAE,EAAEH,IAAI,CAACG,EAFL;AAGJU,gBAAAA,SAAS,EAAEb,IAAI,CAACa,SAHZ;AAIJC,gBAAAA,QAAQ,EAAEd,IAAI,CAACc,QAJX;AAKJV,gBAAAA,KAAK,EAAEJ,IAAI,CAACI;AALR;AAFa,aAArB;AAVkB;AAAA;;AAAA;AAAA;AAAA;AAqBlBN,YAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,cAAAA,MAAM,EAAE,GADW;AAEnBK,cAAAA,KAAK,EAAE,YAAMC;AAFM,aAArB;;AArBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANpB,MAAM;AAAA;AAAA;AAAA,GAAZ;;;;AA4BA,IAAMqB,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOpB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEE,sBAAUD,GAAG,CAACE,IAAd,CAFF;;AAAA;AAEXC,YAAAA,IAFW;;AAAA,gBAIZA,IAJY;AAAA;AAAA;AAAA;;AAKfF,YAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,cAAAA,MAAM,EAAE,GADW;AAEnBK,cAAAA,KAAK,EAAE;AAFY,aAArB;AALe;AAAA;;AAAA;AAAA;AAAA,mBAUKd,yBAAIC,IAAJ,CAAS;AAAEC,cAAAA,EAAE,EAAEH,IAAI,CAACG,EAAX;AAAeC,cAAAA,KAAK,EAAEJ,IAAI,CAACI;AAA3B,aAAT,EAClBC,OAAO,CAACC,GAAR,CAAYC,MADM,EAElB;AAAEC,cAAAA,SAAS,EAAE;AAAb,aAFkB,CAVL;;AAAA;AAUTC,YAAAA,KAVS;AAcfX,YAAAA,GAAG,CAACa,IAAJ,CAAS;AACPD,cAAAA,MAAM,EAAE,GADD;AAEPE,cAAAA,IAAI,EAAE;AACJH,gBAAAA,KAAK,EAALA,KADI;AAEJN,gBAAAA,EAAE,EAAEH,IAAI,CAACG,EAFL;AAGJU,gBAAAA,SAAS,EAAEb,IAAI,CAACa,SAHZ;AAIJC,gBAAAA,QAAQ,EAAEd,IAAI,CAACc,QAJX;AAKJV,gBAAAA,KAAK,EAAEJ,IAAI,CAACI;AALR;AAFC,aAAT;;AAde;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0BjBN,YAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,cAAAA,MAAM,EAAE,GADW;AAEnBK,cAAAA,KAAK,EAAE,aAAMC;AAFM,aAArB;;AA1BiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAALC,KAAK;AAAA;AAAA;AAAA,GAAX","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { addUser, loginUser } from '../models/Users';\r\n// const { signup } = require('../helpers/email');\r\n\r\nexport const signup = async (req, res) => {\r\n  try {\r\n    const user = await addUser(req.body);\r\n\r\n    const token = await jwt.sign({ id: user.id, email: user.email },\r\n      process.env.SECRET,\r\n      { expiresIn: '1h' });\r\n\r\n    // await signup({ firstName, lastName, email });\r\n\r\n    res.status(201).json({\r\n      status: 201,\r\n      data: {\r\n        token,\r\n        id: user.id,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        email: user.email,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      status: 500,\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const login = async (req, res) => {\r\n  try {\r\n    const user = await loginUser(req.body);\r\n\r\n    if (!user) {\r\n      res.status(400).json({\r\n        status: 400,\r\n        error: 'bad request',\r\n      });\r\n    } else {\r\n      const token = await jwt.sign({ id: user.id, email: user.email },\r\n        process.env.SECRET,\r\n        { expiresIn: '1h' });\r\n\r\n      res.json({\r\n        status: 200,\r\n        data: {\r\n          token,\r\n          id: user.id,\r\n          firstName: user.firstName,\r\n          lastName: user.lastName,\r\n          email: user.email,\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      status: 500,\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n"],"file":"Users.js"}