{"version":3,"sources":["../../server/middlewares/verifyToken.js"],"names":["req","res","next","token","headers","authorization","split","jwt","verify","process","env","SECRET","decoded","result","email","status","json","error","user","message"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA;AACA;;;;;;0BACe,iBAAOA,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAELC,YAAAA,KAFK,GAEGH,GAAG,CAACI,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAFH;AAAA;AAAA,mBAGWC,yBAAIC,MAAJ,CAAWL,KAAX,EAAkBM,OAAO,CAACC,GAAR,CAAYC,MAA9B,CAHX;;AAAA;AAGLC,YAAAA,OAHK;AAILC,YAAAA,MAJK,GAII,qBAAS;AAAEC,cAAAA,KAAK,EAAEF,OAAO,CAACE;AAAjB,aAAT,CAJJ;;AAKX,gBAAI,CAACD,MAAL,EAAa;AACXZ,cAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,gBAAAA,MAAM,EAAE,GADW;AAEnBE,gBAAAA,KAAK,EAAE;AAFY,eAArB;AAID,aALD,MAKO;AACLjB,cAAAA,GAAG,CAACkB,IAAJ,GAAWN,OAAX;AACAV,cAAAA,IAAI;AACL;;AAbU;AAAA;;AAAA;AAAA;AAAA;AAeXD,YAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,cAAAA,MAAM,EAAE,GADW;AAEnBE,cAAAA,KAAK,EAAE,YAAME;AAFM,aAArB;;AAfW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { findUser } from '../models/Users';\r\n\r\n// middleware function to check token\r\n// TODO: WRITE TESTS OR THIS\r\nexport default async (req, res, next) => {\r\n  try {\r\n    const token = req.headers.authorization.split(' ')[1];\r\n    const decoded = await jwt.verify(token, process.env.SECRET);\r\n    const result = findUser({ email: decoded.email });\r\n    if (!result) {\r\n      res.status(403).json({\r\n        status: 403,\r\n        error: 'Access is restricted',\r\n      });\r\n    } else {\r\n      req.user = decoded;\r\n      next();\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      status: 500,\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n"],"file":"verifyToken.js"}