{"version":3,"sources":["../../server/models/Users.js"],"names":["addUser","user","Promise","resolve","reject","id","users","length","checkSignup","validate","result","password","hashPassword","push","findUser","param","find","item","email","loginUser","data","checkLogin","then","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAAAC,IAAI;AAAA,SAAI,IAAIC,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE1BC,cAAAA,EAF0B,GAErB;AAAEA,gBAAAA,EAAE,EAAEC,uBAAMC,MAAN,GAAe;AAArB,eAFqB;AAAA;AAAA,qBAGXC,sBAAYC,QAAZ,mBAA0BJ,EAA1B,EAAiCJ,IAAjC,EAHW;;AAAA;AAG1BS,cAAAA,MAH0B;AAAA;AAAA,qBAIL,kBAAKA,MAAM,CAACC,QAAZ,EAAsB,yBAAY,EAAZ,CAAtB,CAJK;;AAAA;AAI1BC,cAAAA,YAJ0B;AAKhCF,cAAAA,MAAM,CAACC,QAAP,GAAkBC,YAAlB;;AACAN,qCAAMO,IAAN,CAAWH,MAAX;;AACAP,cAAAA,OAAO,CAACO,MAAD,CAAP;AAPgC;AAAA;;AAAA;AAAA;AAAA;AAShCN,cAAAA,MAAM,aAAN;;AATgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAJ;AAAA,CAApB;;;;AAaA,IAAMU,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC1B,MAAMd,IAAI,GAAGK,uBAAMU,IAAN,CAAW,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,KAAL,KAAeH,KAAK,CAACG,KAArB,IAA8BD,IAAI,CAACZ,EAAL,KAAYU,KAAK,CAACV,EAApD;AAAA,GAAf,CAAb;;AACA,SAAOJ,IAAP;AACD,CAHD;;;;AAKA,IAAMkB,SAAS,GAAG,SAAZA,SAAY,CAAAC,IAAI;AAAA,SAAI,IAAIlB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACzDiB,yBAAWZ,QAAX,CAAoBW,IAApB,EACGE,IADH,CACQ,UAACZ,MAAD,EAAY;AAChB,UAAMT,IAAI,GAAGa,QAAQ,CAACJ,MAAD,CAArB;AACAP,MAAAA,OAAO,CAACF,IAAD,CAAP;AACD,KAJH,WAKS,UAAAsB,KAAK;AAAA,aAAInB,MAAM,CAACmB,KAAD,CAAV;AAAA,KALd;AAMD,GAPyB,CAAJ;AAAA,CAAtB","sourcesContent":["import { hash, genSaltSync } from 'bcrypt';\r\nimport users from '../utils/dummyUsers';\r\nimport { checkSignup, checkLogin } from '../helpers/validate';\r\n\r\nconst addUser = user => new Promise(async (resolve, reject) => {\r\n  try {\r\n    const id = { id: users.length + 1 };\r\n    const result = await checkSignup.validate({ ...id, ...user });\r\n    const hashPassword = await hash(result.password, genSaltSync(10));\r\n    result.password = hashPassword;\r\n    users.push(result);\r\n    resolve(result);\r\n  } catch (error) {\r\n    reject(error);\r\n  }\r\n});\r\n\r\nconst findUser = (param) => {\r\n  const user = users.find(item => item.email === param.email || item.id === param.id);\r\n  return user;\r\n};\r\n\r\nconst loginUser = data => new Promise((resolve, reject) => {\r\n  checkLogin.validate(data)\r\n    .then((result) => {\r\n      const user = findUser(result);\r\n      resolve(user);\r\n    })\r\n    .catch(error => reject(error));\r\n});\r\n\r\nexport { addUser, findUser, loginUser };\r\n"],"file":"Users.js"}