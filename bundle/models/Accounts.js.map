{"version":3,"sources":["../../server/models/Accounts.js"],"names":["addAccount","account","Promise","resolve","reject","id","accounts","length","createdOn","format","checkAccount","validate","then","result","push","error","removeAccount","accountNumber","findIndex","item","Number","data","splice","Error","editStatus","params","body","checkStatus","status"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAAAC,OAAO;AAAA,SAAI,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7D,QAAMC,EAAE,GAAG;AAAEA,MAAAA,EAAE,EAAEC,0BAASC,MAAT,GAAkB;AAAxB,KAAX;AACA,QAAMC,SAAS,GAAG;AAAEA,MAAAA,SAAS,EAAE,0BAASC,MAAT,CAAgB,yBAAhB;AAAb,KAAlB;;AACAC,2BAAaC,QAAb,mBAA2BN,EAA3B,EAAkCG,SAAlC,EAAgDP,OAAhD,GACGW,IADH,CACQ,UAACC,MAAD,EAAY;AAChBP,gCAASQ,IAAT,CAAcD,MAAd;;AACAV,MAAAA,OAAO,CAACU,MAAD,CAAP;AACD,KAJH,WAKS,UAAAE,KAAK;AAAA,aAAIX,MAAM,CAACW,KAAD,CAAV;AAAA,KALd;AAMD,GAT6B,CAAJ;AAAA,CAA1B;;;;AAWA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MAAGC,aAAH,QAAGA,aAAH;AAAA,SAAuB,IAAIf,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC5E,QAAMH,OAAO,GAAGK,0BAASY,SAAT,CAAmB,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACF,aAAL,KAAuBG,MAAM,CAACH,aAAD,CAAjC;AAAA,KAAvB,CAAhB;;AACA,QAAIhB,OAAO,KAAK,CAAC,CAAjB,EAAoB;AAClB,UAAMoB,IAAI,GAAGf,0BAASL,OAAT,CAAb;;AACAK,gCAASgB,MAAT,CAAgBrB,OAAhB,EAAyB,CAAzB;;AACAE,MAAAA,OAAO,CAACkB,IAAD,CAAP;AACD,KAJD,MAIO;AACLjB,MAAAA,MAAM,CAAC,IAAImB,KAAJ,CAAU,wBAAV,CAAD,CAAN;AACD;AACF,GAT4C,CAAvB;AAAA,CAAtB;;;;AAWA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,MAAGC,MAAH,SAAGA,MAAH;AAAA,MAAWC,IAAX,SAAWA,IAAX;AAAA,SAAsB,IAAIxB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACxEuB,0BAAYhB,QAAZ,mBAA0Bc,MAA1B,EAAqCC,IAArC,GACGd,IADH,CACQ,UAACC,MAAD,EAAY;AAChB;AACA,UAAMZ,OAAO,GAAGK,0BAASY,SAAT,CAAmB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACF,aAAL,KAAuBJ,MAAM,CAACI,aAAlC;AAAA,OAAvB,CAAhB;;AACA,UAAIhB,OAAO,KAAK,CAAC,CAAjB,EAAoB;AAClB,YAAMoB,IAAI,GAAGf,0BAASL,OAAT,CAAb;AACAoB,QAAAA,IAAI,CAACO,MAAL,GAAcf,MAAM,CAACe,MAArB;AACAzB,QAAAA,OAAO,CAACkB,IAAD,CAAP;AACD,OAJD,MAIO;AACLjB,QAAAA,MAAM,CAAC,IAAImB,KAAJ,CAAU,wBAAV,CAAD,CAAN;AACD;AACF,KAXH,WAYS,UAAAR,KAAK;AAAA,aAAIX,MAAM,CAACW,KAAD,CAAV;AAAA,KAZd;AAaD,GAdwC,CAAtB;AAAA,CAAnB","sourcesContent":["import moment from 'moment';\nimport accounts from '../utils/dummyAccounts';\nimport { checkAccount, checkStatus } from '../helpers/validate';\n\nconst addAccount = account => new Promise((resolve, reject) => {\n  const id = { id: accounts.length + 1 };\n  const createdOn = { createdOn: moment().format('MMMM Do YYYY, h:mm:ss a') };\n  checkAccount.validate({ ...id, ...createdOn, ...account })\n    .then((result) => {\n      accounts.push(result);\n      resolve(result);\n    })\n    .catch(error => reject(error));\n});\n\nconst removeAccount = ({ accountNumber }) => new Promise((resolve, reject) => {\n  const account = accounts.findIndex(item => item.accountNumber === Number(accountNumber));\n  if (account !== -1) {\n    const data = accounts[account];\n    accounts.splice(account, 1);\n    resolve(data);\n  } else {\n    reject(new Error('Account doesn\\'t exist'));\n  }\n});\n\nconst editStatus = ({ params, body }) => new Promise((resolve, reject) => {\n  checkStatus.validate({ ...params, ...body })\n    .then((result) => {\n      // console.log(result)\n      const account = accounts.findIndex(item => item.accountNumber === result.accountNumber);\n      if (account !== -1) {\n        const data = accounts[account];\n        data.status = result.status;\n        resolve(data);\n      } else {\n        reject(new Error('Account doesn\\'t exist'));\n      }\n    })\n    .catch(error => reject(error));\n});\n\nexport { addAccount, removeAccount, editStatus };\n"],"file":"Accounts.js"}